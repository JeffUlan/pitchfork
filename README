= Unicorn: Unix + LAN/localhost-optimized fork of Mongrel

Unicorn is designed to only serve fast clients.  See the PHILOSOPHY
and DESIGN documents for more details regarding this.

== Features

* Built on the solid Mongrel code base and takes full advantage
  of functionality exclusive to Unix-like operating systems.

* Mostly written in Ruby, only the HTTP parser (stolen and trimmed
  down from Mongrel) is written in C.  Unicorn is compatible with
  both Ruby 1.8 and 1.9.

* Process management: Unicorn will reap and restart workers that
  die from broken apps.  There is no need to manage multiple processes
  yourself.

* Load balancing is done entirely by the operating system kernel.
  Requests never pile up behind a busy worker.

* Does not care if your application is thread-safe or not, workers
  all run within their own isolated address space and only serve one
  client at a time.

* Supports all Rack applications, along with pre-Rack versions of
  Ruby on Rails via a Rack wrapper.

* Builtin reopening of all log files in your application via
  USR1 signal.  This allows logrotate to rotate files atomically
  and quickly via rename instead of the racy and slow
  copytruncate method.

* nginx-style binary re-execution without losing connections.
  You can upgrade Unicorn, your entire application, libraries
  and even your Ruby interpreter as long as Unicorn is
  installed in the same path.

* before_fork and after_fork hooks in case your application
  has special needs when dealing with forked processes.  These
  should not be needed when the "preload_app" directive is
  false (the default).

* Can be used with copy-on-write-friendly memory management
  to save memory (by setting "preload_app" to true).

* Able to listen on multiple interfaces including UNIX sockets,
  each worker process can also bind to a private port via the
  after_fork hook for easy debugging.

== License

Unicorn is copyright 2009 Eric Wong and contributors.
It is based on Mongrel and carries the same license:

Mongrel is copyright 2007 Zed A. Shaw and contributors. It is licensed
under the Ruby license and the GPL2. See the include LICENSE file for
details.

Unicorn is 100% Free Software.

== Install

The library consists of a C extension so you'll need a C compiler or at
least a friend who can build it for you.

You may download the tarball from the Mongrel project page on Rubyforge
and run setup.rb after unpacking it:

http://rubyforge.org/frs/?group_id=1306

You may also install it via Rubygems on Rubyforge:

  gem install unicorn

You can get the latest source via git from the following locations
(these versions may not be stable):

  git://git.bogomips.org/unicorn.git
  http://git.bogomips.org/unicorn.git
  git://repo.or.cz/unicorn.git (mirror)
  http://repo.or.cz/r/unicorn.git (mirror)

If you have web browser software for the World Wide Web
(on the Information Superhighway), you may browse the code from
your web browser and download the latest snapshot tarballs here:

* http://git.bogomips.org/cgit/unicorn.git (this server runs Unicorn!)
* http://repo.or.cz/w/unicorn.git (gitweb mirror)

== Usage

=== non-Rails Rack applications

In APP_ROOT, run:

  unicorn

=== for Rails applications (should work for all 1.2 or later versions)

In RAILS_ROOT, run:

  unicorn_rails

Unicorn will bind to all interfaces TCP port 8080 by default.
You may use the '-l/--listen' switch to bind to a different
address:port or a UNIX socket.

=== Configuration File(s)

Unicorn will look for the config.ru file used by rackup in APP_ROOT.

For deployments, it can use a config file for Unicorn-specific options
specified by the --config-file/-c command-line switch.  See
Unicorn::Configurator for the syntax of the Unicorn-specific options.
The default settings are designed for maximum out-of-the-box
compatibility with existing applications.

Most command-line options for other Rack applications (above) are also
supported.  Run `unicorn -h` or `unicorn_rails -h` to see command-line
options.

== Disclaimer

Like the creatures themselves, production deployments of Unicorn are rare.
There is NO WARRANTY whatsoever if anything goes wrong, but let us know and
we'll try our best to fix it.

Rainbows are NOT included.

== Known Issues

* WONTFIX: code reloading with Sinatra 0.3.2 (and likely older
  versions) apps is broken.  The workaround is to force production
  mode to disable code reloading in your Sinatra application:
    set :env, :production
  Since this is no longer an issue with Sinatra 0.9.x apps and only
  affected non-production instances, this will not be fixed on our end.
  Also remember we're capable of replacing the running binary without
  dropping any connections regardless of framework :)

== Contact

Newsgroup and mailing list maybe coming...
Email Eric Wong at normalperson@yhbt.net for now.
