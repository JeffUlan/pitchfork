= Unicorn: Rack HTTP server for Unix and fast clients

Unicorn is a HTTP server for Rack applications designed to take
advantage of features in Unix/Unix-like kernels and only serve fast
clients on low-latency, high-bandwidth connections.  Slow clients should
only be served by placing a reverse proxy capable of fully-buffering
both the the request and response in between Unicorn and slow clients.

== Features

* Designed for Rack, Unix, fast clients, and ease-of-debugging.  We
  cut out everything that is better supported by the operating system,
  {nginx}[http://nginx.net/] or {Rack}[http://rack.rubyforge.org/].

* Compatible with both Ruby 1.8 and 1.9.  Rubinius support is in-progress.

* Process management: Unicorn will reap and restart workers that
  die from broken apps.  There is no need to manage multiple processes
  or ports yourself.  Unicorn can spawn and manage any number of
  worker processes you choose to scale to your backend.

* Load balancing is done entirely by the operating system kernel.
  Requests never pile up behind a busy worker process.

* Does not care if your application is thread-safe or not, workers
  all run within their own isolated address space and only serve one
  client at a time for maximum robustness.

* Supports all Rack applications, along with pre-Rack versions of
  Ruby on Rails via a Rack wrapper.

* Builtin reopening of all log files in your application via
  USR1 signal.  This allows logrotate to rotate files atomically and
  quickly via rename instead of the racy and slow copytruncate method.
  Unicorn also takes steps to ensure multi-line log entries from one
  request all stay within the same file.

* nginx-style binary upgrades without losing connections.
  You can upgrade Unicorn, your entire application, libraries
  and even your Ruby interpreter without dropping clients.

* before_fork and after_fork hooks in case your application
  has special needs when dealing with forked processes.  These
  should not be needed when the "preload_app" directive is
  false (the default).

* Can be used with copy-on-write-friendly memory management
  to save memory (by setting "preload_app" to true).

* Able to listen on multiple interfaces including UNIX sockets,
  each worker process can also bind to a private port via the
  after_fork hook for easy debugging.

* Simple and easy Ruby DSL for configuration.

* Decodes chunked transfers on-the-fly, thus allowing upload progress
  notification to be implemented as well as being able to tunnel
  arbitrary stream-based protocols over HTTP.

== Versions

{Current v0.92.0}[http://git.bogomips.org/cgit/unicorn.git/tag/?id=v0.92.0]

{Old Stable v0.8.4}[http://git.bogomips.org/cgit/unicorn.git/tag/?id=v0.8.4]

== License

Unicorn is copyright 2009 Eric Wong and contributors.
It is based on Mongrel and carries the same license.

Mongrel is copyright 2007 Zed A. Shaw and contributors. It is licensed
under the Ruby license and the GPL2. See the included LICENSE file for
details.

Unicorn is 100% Free Software.

== Install

The library consists of a C extension so you'll need a C compiler
and Ruby development libraries/headers.

You may download the tarball from the Mongrel project page on Rubyforge
and run setup.rb after unpacking it:

http://rubyforge.org/frs/?group_id=1306

You may also install it via Rubygems on Rubyforge:

  gem install unicorn

You can get the latest source via git from the following locations
(these versions may not be stable):

  git://git.bogomips.org/unicorn.git
  http://git.bogomips.org/unicorn.git
  git://repo.or.cz/unicorn.git (mirror)
  http://repo.or.cz/r/unicorn.git (mirror)

You may browse the code from the web and download the latest snapshot
tarballs here:

* http://git.bogomips.org/cgit/unicorn.git (cgit)
* http://repo.or.cz/w/unicorn.git (gitweb)

== Usage

=== non-Rails Rack applications

In APP_ROOT, run:

  unicorn

=== for Rails applications (should work for all 1.2 or later versions)

In RAILS_ROOT, run:

  unicorn_rails

Unicorn will bind to all interfaces on TCP port 8080 by default.
You may use the +--listen/-l+ switch to bind to a different
address:port or a UNIX socket.

=== Configuration File(s)

Unicorn will look for the config.ru file used by rackup in APP_ROOT.

For deployments, it can use a config file for Unicorn-specific options
specified by the +--config-file/-c+ command-line switch.  See
Unicorn::Configurator for the syntax of the Unicorn-specific options.
The default settings are designed for maximum out-of-the-box
compatibility with existing applications.

Most command-line options for other Rack applications (above) are also
supported.  Run `unicorn -h` or `unicorn_rails -h` to see command-line
options.

== Disclaimer

Like the creatures themselves, production deployments of Unicorn are
rare or even non-existent.  There is NO WARRANTY whatsoever if anything
goes wrong, but let us know and we'll try our best to fix it.

Unicorn is designed to only serve fast clients either on the local host
or a fast LAN.  See the PHILOSOPHY and DESIGN documents for more details
regarding this.

== Contact

All feedback (bug reports, user/development dicussion, patches, pull
requests) go to the mailing list/newsgroup.  Patches must be sent inline
(git format-patch -M + git send-email).  No subscription is necessary
to post on the mailing list.  No top posting.  Address replies +To:+ (or
+Cc:+) the original sender and +Cc:+ the mailing list.

* email: mailto:mongrel-unicorn@rubyforge.org
* nntp: nntp://news.gmane.org/gmane.comp.lang.ruby.unicorn.general
* archives: http://rubyforge.org/pipermail/mongrel-unicorn/
* subscribe: http://rubyforge.org/mailman/listinfo/mongrel-unicorn/
* finger: unicorn@bogomips.org
