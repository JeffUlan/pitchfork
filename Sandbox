= Tips for using unicorn with Sandbox installation tools

Since unicorn includes executables and is usually used to start a Ruby
process, there are certain caveats to using it with tools that sandbox
RubyGems installations such as
{Bundler}[https://bundler.io/] or
{Isolate}[https://github.com/jbarnette/isolate].

== General deployment

If you're sandboxing your unicorn installation and using Capistrano (or
similar), it's required that you sandbox your RubyGems in a per-application
shared directory that can be used between different revisions.

== Bundler

=== Running

If you're bundling unicorn, use "bundle exec unicorn" (or "bundle exec
unicorn_rails") to start unicorn with the correct environment variables

ref: https://yhbt.net/unicorn-public/9ECF07C4-5216-47BE-961D-AFC0F0C82060@internetfamo.us/

Otherwise (if you choose to not sandbox your unicorn installation), we
expect the tips for Isolate (below) apply, too.

== Isolate

=== Running

Installing "unicorn" as a system-wide Rubygem and using the
isolate gem may cause issues if you're using any of the bundled
application-level libraries in unicorn/app/* (for compatibility
with CGI-based applications, Rails <= 2.2.2, or ExecCgi).
For now workarounds include doing one of the following:

1. Isolating unicorn, setting GEM_HOME to your Isolate path,
   and running the isolated version of unicorn.  You *must* set
   GEM_HOME before running your isolated unicorn install in this way.

2.  Installing the same version of unicorn as a system-wide Rubygem
    *and* isolating unicorn as well.

3. Explicitly setting RUBYLIB or $LOAD_PATH to include any gem path
   where the unicorn gem is installed
   (e.g. /usr/lib/ruby/gems/3.0.0/gems/unicorn-VERSION/lib)
