---
title: Win32 HOWTO
inMenu: true
directoryName: Documentation
---

h1. Mongrel Win32 HOWTO

Mongrel now supports Win32 much better than previous releases thanks to 
some "great people":../attributions.html and their hard work.  You can
now run Mongrel with Ruby on Rails as a windows service, ang there are
pre-compiled gems available for people to use.

*Before reading this document you need to read "Getting Started.":started.html and make sure it works.*

h2. Stopping The mongrel_rails Script

When you run the mongrel_rails script from the command line you'll have to use *CTRL-Pause/Break*
to get it to exit rather than CTRL-C.


h2. Running The Service

After you do the gem install, find a Rails application you want to run
and do:

 $ mongrel_rails_service install -n myapp \ 
     -r c:\my\path\to\myapp -p 4000 -e production
 $ mongrel_rails_service start -n myapp

Now hit the port and poof, works (or should).

The application will stop if you use:

 $ mongrel_rails_service stop -n myapp

Now the really great thing is that you can just do all this from
the Services control panel like your Rails application is a regular
Windows service.

Even works in development mode, which is pretty nice.  I use win32
at work now and what I have setup is three services:  myapp_dev, 
myapp_stage, myapp_prod.  I point dev and stage at the same 
directory but run dev in *development* mode and stage in *production*
mode.  Then I have myapp_prod in a separate directory and when I'm
about to claim I've got something to release I'll go simulate a
subversion check-out and run my tests again.


h2. Other Service Commands

There is a full set of service control commands in the mongrel_rails_service script.
This lets you use either the Services control panel or a command line script to 
manage your Rails applications.  What's also nice is that you can register as many
applications as you want, and even the same one with different names.


h3. install

If you want to run the same app in different modes then use the *-n* option to the *install*
command:

 $ mongrel_rails_service install -n myapp_dev \ 
     -r c:\my\path\to\myapp -p 4000 -e development
 $ mongrel_rails_service start -n myapp

You can also use the *-d* option to give the service a different display name in the
Services console.

h3. start

Pretty much just takes a service name to start up.  It will run and print a message
until the service finally starts, which sometimes can take 10-60 seconds.

h3. stop

Sort of works right now and also only takes a -n parameter.  It has a few errors
when it tries to stop a service so we're working on making it cleaner.

h3. delete

Takes the name (-n) of the service to delete and then removes it from the list.
*This would be how you'd remove a service so you can change it's start-up options.*


h2. CPU Affinity

Mongrel's win32 support actually is able to set the CPU affinity of a running
Mongrel service.  This is pretty neat since it means if you're running a 
fancy SMP machine or a dual core that pretends to be SMP, then you can
force Mongrel onto one of them and get a nice little boost.

It's pretty easy to use, just pass the *-c or --cpu* option to the *install*
command and give a CPU of 1-X.  That means if you have 4 CPUs and you want 
Mongrel on #4 then do:

 $ mongrel_rails_service install -n myapp \ 
     -r c:\my\path\to\myapp -p 4000 -e production -c 4

Pretty much the same command, just one more option and you're done.


